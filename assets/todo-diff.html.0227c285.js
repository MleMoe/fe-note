import{_ as n,d as s}from"./app.d1630e5f.js";const a={},p=s(`<h1 id="\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u65B9\u6CD5" aria-hidden="true">#</a> \u65B9\u6CD5</h1><h2 id="diff-js" tabindex="-1"><a class="header-anchor" href="#diff-js" aria-hidden="true">#</a> diff.js</h2><p>\u540C\u6837\uFF0C<code>&lt;Header/&gt; &lt;Footer/&gt; &lt;List/&gt; &lt;Todo/&gt;</code> \u4E5F\u662F vdom\uFF0C\u800C\u4E14\u5176 type \u4E3A function\uFF0C\u4E0D\u662F\u6587\u672C/\u5143\u7D20\u8282\u70B9\uFF0C\u6240\u4EE5\u6211\u4EEC\u9700\u8981\u5BF9 mount \u65B9\u6CD5\u505A\u51FA\u6539\u9020\uFF0C\u4EE5\u987A\u5229\u8F6C\u6362\u4E3A\u6B63\u786E\u7684 dom \u5185\u5BB9\u3002</p><p>\u5148\u7ED9\u8BE5 vdom \u505A\u4E00\u4E9B\u8F85\u52A9\u5DE5\u4F5C\uFF0C\u4F8B\u5982\u521B\u5EFA\u5B9E\u4F8B\uFF0C\u540E\u7EED\u53EF\u4F7F\u7528\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token parameter">vdom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token operator">=</span> vdom<span class="token punctuation">;</span>
  <span class="token keyword">let</span> instance<span class="token punctuation">;</span>

  <span class="token comment">// \u5224\u65AD\u662F\u5426\u662F\u4E00\u4E2A\u7C7B\u7EC4\u4EF6</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u82E5\u662F\u4E00\u4E2A\u51FD\u6570\u7EC4\u4EF6</span>
    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    instance<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u8BBE\u7F6E\u66F4\u65B0\u53E5\u67C4</span>
  instance<span class="token punctuation">.</span>updater <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Updater</span><span class="token punctuation">(</span>vdom<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">vdom<span class="token punctuation">,</span> parentNode<span class="token punctuation">,</span> mountType<span class="token punctuation">,</span> oldDomNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> domNode<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>vdom<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> text<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> vdom<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      vdom<span class="token punctuation">.</span>domNode <span class="token operator">=</span> domNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mountDomNode</span><span class="token punctuation">(</span>domNode<span class="token punctuation">,</span> parentNode<span class="token punctuation">,</span> mountType<span class="token punctuation">,</span> oldDomNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">attachRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> domNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      vdom<span class="token punctuation">.</span>domNode <span class="token operator">=</span> domNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
      props <span class="token operator">&amp;&amp;</span>
        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          <span class="token function">setProp</span><span class="token punctuation">(</span>domNode<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> props<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mountDomNode</span><span class="token punctuation">(</span>domNode<span class="token punctuation">,</span> parentNode<span class="token punctuation">,</span> mountType<span class="token punctuation">,</span> oldDomNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">attachRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> domNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
      children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> domNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      vdom<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>vdom<span class="token punctuation">)</span><span class="token punctuation">;</span>
      vdom<span class="token punctuation">.</span>renderVdom <span class="token operator">=</span> vdom<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      vdom<span class="token punctuation">.</span>domNode <span class="token operator">=</span> domNode <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>
        vdom<span class="token punctuation">.</span>renderVdom<span class="token punctuation">,</span>
        parentNode<span class="token punctuation">,</span>
        mountType<span class="token punctuation">,</span>
        oldDomNode
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">attachRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> vdom<span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">runLifeCycle</span><span class="token punctuation">(</span>vdom<span class="token punctuation">,</span> <span class="token string">&#39;componentDidMount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> domNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> isChanged <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/common/utils&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;VDOM_TEXT&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">PROPS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;className&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;htmlFor&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;checked&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">EVENT_MAP</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">onDoubleClick</span><span class="token operator">:</span> <span class="token string">&#39;ondblclick&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">findChildIndexBy</span><span class="token punctuation">(</span><span class="token parameter">children<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> ignore</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> children<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>ignore<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> child<span class="token operator">?.</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> value
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">diffChildren</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> newNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> children <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> newChildren <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>newNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> newChildVdoms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> updated <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  newChildren<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">newChild</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> newChild<span class="token operator">?.</span>key<span class="token punctuation">;</span>
    <span class="token keyword">const</span> type <span class="token operator">=</span> newChild<span class="token operator">?.</span>type<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> type <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">findChildIndexBy</span><span class="token punctuation">(</span>
        children<span class="token punctuation">,</span>
        key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&#39;key&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;type&#39;</span><span class="token punctuation">,</span>
        key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> key <span class="token operator">:</span> type<span class="token punctuation">,</span>
        updated
      <span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        updated<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">diff</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> newChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      newChildVdoms<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>updated<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">diff</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  newChildVdoms<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">newChild<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> domNode <span class="token operator">=</span> node<span class="token punctuation">.</span>domNode<span class="token punctuation">;</span>
    <span class="token keyword">const</span> newChildNode <span class="token operator">=</span> newChild<span class="token punctuation">.</span>domNode<span class="token punctuation">;</span>
    <span class="token keyword">const</span> childNode <span class="token operator">=</span> domNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>childNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>childNode <span class="token operator">!==</span> newChildNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">mountDomNode</span><span class="token punctuation">(</span>newChildNode<span class="token punctuation">,</span> domNode<span class="token punctuation">,</span> <span class="token string">&#39;insert&#39;</span><span class="token punctuation">,</span> childNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">mountDomNode</span><span class="token punctuation">(</span>newChildNode<span class="token punctuation">,</span> domNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">mount</span><span class="token punctuation">(</span>newChild<span class="token punctuation">,</span> domNode<span class="token punctuation">,</span> <span class="token string">&#39;insert&#39;</span><span class="token punctuation">,</span> childNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// const max = Math.max(children.length, newChildren.length);</span>
  <span class="token comment">// for (let i = 0; i &lt; max; i++) {</span>
  <span class="token comment">//   diff(children[i], newChildren[i], node);</span>
  <span class="token comment">// }</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">shouldUpdate</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> newNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> node<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
  <span class="token keyword">const</span> nextProps <span class="token operator">=</span> newNode<span class="token punctuation">.</span>props<span class="token punctuation">;</span>
  <span class="token keyword">const</span> nextState <span class="token operator">=</span> instance<span class="token punctuation">.</span>newState <span class="token operator">||</span> instance<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">!</span>instance<span class="token punctuation">.</span>shouldComponentUpdate <span class="token operator">||</span>
    instance<span class="token punctuation">.</span><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">diffProps</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> newNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> props <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> newProps <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> allProps <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token operator">...</span>newProps<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  allProps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> hasProp <span class="token operator">=</span> prop <span class="token keyword">in</span> node<span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">const</span> newHasProp <span class="token operator">=</span> prop <span class="token keyword">in</span> newNode<span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">const</span> val <span class="token operator">=</span> node<span class="token punctuation">.</span>props<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> newVal <span class="token operator">=</span> newNode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasProp <span class="token operator">&amp;&amp;</span> newHasProp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">!==</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setProp</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>domNode<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hasProp <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>newHasProp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setProp</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>domNode<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasProp <span class="token operator">&amp;&amp;</span> newHasProp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setProp</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>domNode<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">diff</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> newNode<span class="token punctuation">,</span> parentNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> newNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> newNode<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>text <span class="token operator">!==</span> newNode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          node<span class="token punctuation">.</span>domNode<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newNode<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">diffProps</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">diffChildren</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> instance<span class="token punctuation">,</span> renderVdom <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
        newNode<span class="token punctuation">.</span>instance <span class="token operator">=</span> instance<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldUpdate</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> state <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">;</span>
          newNode<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>props <span class="token operator">=</span> newNode<span class="token punctuation">.</span>props<span class="token punctuation">;</span>
          newNode<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>state <span class="token operator">=</span> instance<span class="token punctuation">.</span>nextState<span class="token punctuation">;</span>
          <span class="token keyword">delete</span> instance<span class="token punctuation">.</span>nextState<span class="token punctuation">;</span>
          newNode<span class="token punctuation">.</span>renderVdom <span class="token operator">=</span> node<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">diff</span><span class="token punctuation">(</span>renderVdom<span class="token punctuation">,</span> newNode<span class="token punctuation">.</span>renderVdom<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">runLifeCycle</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> <span class="token string">&#39;componentDidUpdate&#39;</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          newNode<span class="token punctuation">.</span>renderVdom <span class="token operator">=</span> renderVdom<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      newNode<span class="token punctuation">.</span>domNode <span class="token operator">=</span> newNode<span class="token punctuation">.</span>domNode <span class="token operator">||</span> node<span class="token punctuation">.</span>domNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">mount</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> parentNode<span class="token punctuation">,</span> <span class="token string">&#39;replace&#39;</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>domNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>newNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">unmount</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node <span class="token operator">&amp;&amp;</span> newNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">mount</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node <span class="token operator">!==</span> newNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span> node<span class="token punctuation">.</span>domNode<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> node<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> node<span class="token punctuation">.</span>renderVdom<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prev<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRef</span><span class="token punctuation">(</span><span class="token parameter">current</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> current <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> allProps<span class="token punctuation">,</span> <span class="token operator">...</span>children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span> <span class="token operator">=</span> allProps <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> props <span class="token punctuation">}</span><span class="token punctuation">;</span>

  element<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">flatten</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> child <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>child<span class="token punctuation">.</span>type
      <span class="token operator">?</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">TEXT</span><span class="token punctuation">,</span>
          <span class="token literal-property property">text</span><span class="token operator">:</span> child<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token operator">:</span> child<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ref <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>ref <span class="token operator">=</span> ref<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> element<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">setProp</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> val<span class="token punctuation">,</span> remove</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">[</span><span class="token constant">EVENT_MAP</span><span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">||</span> prop<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">PROPS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">[</span>remove <span class="token operator">?</span> <span class="token string">&#39;removeAttribute&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;setAttribute&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">attachRef</span><span class="token punctuation">(</span><span class="token parameter">ref<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ref <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current <span class="token operator">=</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">mountDomNode</span><span class="token punctuation">(</span>newDomNode<span class="token punctuation">,</span> parentNode<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">&#39;append&#39;</span><span class="token punctuation">,</span> domNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  parentNode <span class="token operator">=</span> parentNode <span class="token operator">||</span> domNode<span class="token operator">?.</span>parentNode<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>parentNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&#39;replace&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parentNode<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>newDomNode<span class="token punctuation">,</span> domNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&#39;insert&#39;</span> <span class="token operator">&amp;&amp;</span> domNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newDomNode<span class="token punctuation">,</span> domNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      parentNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newDomNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">runLifeCycle</span><span class="token punctuation">(</span><span class="token parameter">vdom<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> vdom<span class="token punctuation">.</span>instance<span class="token operator">?.</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token parameter">vdom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">runLifeCycle</span><span class="token punctuation">(</span>vdom<span class="token punctuation">,</span> <span class="token string">&#39;componentWillUnmount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vdom <span class="token operator">&amp;&amp;</span> vdom<span class="token punctuation">.</span>domNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">attachRef</span><span class="token punctuation">(</span>vdom<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vdom<span class="token punctuation">.</span>domNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>vdom<span class="token punctuation">.</span>domNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br></div></div>`,7);function t(o,e){return p}var u=n(a,[["render",t],["__file","todo-diff.html.vue"]]);export{u as default};
